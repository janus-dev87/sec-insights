"""replace value within MessageSubProcessSourceEnum

Revision ID: 1b0b616e08c6
Revises: 90a1d6a26343
Create Date: 2023-07-28 19:39:03.256581

"""
from typing import Set
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql


# revision identifiers, used by Alembic.
revision = "1b0b616e08c6"
down_revision = "90a1d6a26343"
branch_labels = None
depends_on = None


existing_sub_process_source_enum_values = {
    "CHUNKING",
    "NODE_PARSING",
    "EMBEDDING",
    "LLM",
    "QUERY",
    "RETRIEVE",
    "SYNTHESIZE",
    "TREE",
    "CONSTRUCTED_QUERY_ENGINE",
    "SUB_QUESTIONS",
}

new_sub_process_source_enum_values = {
    *existing_sub_process_source_enum_values,
    "SUB_QUESTION",
}


def replace_enum_values(enum_name: str, table: str, new_values: Set[str]):
    """
    Create a new type, add the value to it, update the column to use the new type and delete the old type
    """
    op.execute(f'ALTER TYPE public."{enum_name}" RENAME TO "{enum_name}Old"')
    sa.Enum(*new_values, name=enum_name).create(op.get_bind())
    op.execute(
        f'ALTER TABLE {table} ALTER COLUMN source TYPE public."{enum_name}" USING source::text::public."{enum_name}"'
    )
    op.execute(f'DROP TYPE public."{enum_name}Old"')


def upgrade() -> None:
    # Alter MessageSubProcessEnum to add "SUB_QUESTION" as a valid value
    replace_enum_values(
        "MessageSubProcessSourceEnum",
        "messagesubprocess",
        new_sub_process_source_enum_values,
    )

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # revert back to the old enum type
    # Note that this won't work if the DB already has rows with the new enum values
    replace_enum_values(
        "MessageSubProcessSourceEnum",
        "messagesubprocess",
        existing_sub_process_source_enum_values,
    )
    # ### end Alembic commands ###
